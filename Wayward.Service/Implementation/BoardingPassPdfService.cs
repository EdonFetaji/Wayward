using System.Globalization;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using Wayward.Domain.DomainModels;
using Wayward.Service.Interface;

// Aliases to avoid type-name collisions with System.Reflection.Metadata.Document and System.ComponentModel.IContainer
using QDocument = QuestPDF.Fluent.Document;
using QContainer = QuestPDF.Infrastructure.IContainer;

namespace Wayward.Service.Implementation
{
    public class BoardingPassPdfService : IBoardingPassPdfService
    {
        public byte[] Generate(Booking booking)
        {
            if (booking == null)
                throw new ArgumentNullException(nameof(booking));

            var flights = booking.BookedFlights?.ToList() ?? new List<BookedFlight>();

            var owner = booking.Owner;
            string ownerName = string.Join(" ",
                    new[] { owner?.Name, owner?.Surname }.Where(s => !string.IsNullOrWhiteSpace(s)))
                .Trim();

            string ownerAccount = owner?.UserName
                               ?? owner?.Email
                               ?? booking.OwnerId
                               ?? "(unknown)";

            string ownerPassport = string.IsNullOrWhiteSpace(owner?.PassportNumber)
                ? "N/A"
                : owner!.PassportNumber;


            var total = flights
                .Where(bf => bf?.Flight != null)
                .Sum(bf => (decimal)bf.Flight!.Price);

            QuestPDF.Settings.License = LicenseType.Community;

            // Use alias QDocument to avoid ambiguity
            var doc = QDocument.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(30);
                    page.DefaultTextStyle(x => x.FontSize(11));

                    page.Header().Element((QContainer c) => ComposeHeader(c));
                    page.Content().Element((QContainer c) =>
                        ComposeBody(c, booking, ownerName, ownerAccount, ownerPassport, flights, total));
                    page.Footer().AlignCenter().Text(txt =>
                    {
                        txt.Span("Generated by Wayward & Co • ");
                        txt.Span(DateTime.Now.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture));
                    });
                });
            });

            return doc.GeneratePdf();
        }

        // ----------------- Layout composers -----------------

        private static void ComposeHeader(QContainer c)
        {
            c.Row(row =>
            {
                row.RelativeItem().Column(col =>
                {
                    col.Item().Text("Wayward & Co").SemiBold().FontSize(20);
                    col.Item().Text("Boarding Pass").FontSize(14).Italic();
                });
                row.ConstantItem(120).Height(40)
                    .Background(Colors.Grey.Lighten3)
                    .AlignCenter().AlignMiddle()
                    .Text("WAYWARD").SemiBold();
            });
        }

        private static void ComposeBody(
            QContainer c,
            Booking booking,
            string ownerName,
            string ownerAccount,
            string ownerPassport,
            List<BookedFlight> fls,
            decimal totalPrice)
        {
            c.PaddingTop(10).Column(col =>
            {
                // Summary
                col.Item().Row(r =>
                {
                    r.RelativeItem().Column(cc =>
                    {
                        cc.Item().Text($"Booking ID: {booking.Id}").SemiBold();

                        cc.Item().Text(txt =>
                        {
                            txt.Span("Passenger: ").SemiBold();
                            txt.Span(string.IsNullOrWhiteSpace(ownerName) ? "(unknown)" : ownerName);
                        });

                        cc.Item().Text(txt =>
                        {
                            txt.Span("Account: ").SemiBold();
                            txt.Span(ownerAccount);
                        });

                        cc.Item().Text(txt =>
                        {
                            txt.Span("Passport: ").SemiBold();
                            txt.Span(ownerPassport);
                        });
                    });

                    r.ConstantItem(150).Column(cc =>
                    {
                        cc.Item().Text("Total").SemiBold();
                        cc.Item().Text($"{totalPrice:0.00} EUR");
                    });
                });

                col.Item().PaddingVertical(8).LineHorizontal(1).LineColor(Colors.Grey.Lighten2);

                // Flights table
                col.Item().Text("Flight(s)").SemiBold().FontSize(13);

                if (!fls.Any())
                {
                    col.Item().Text("No flights in this booking.").Italic();
                }
                else
                {
                    col.Item().Table(table =>
                    {
                        table.ColumnsDefinition(columns =>
                        {
                            columns.RelativeColumn(3); // airline
                            columns.RelativeColumn(4); // route
                            columns.RelativeColumn(3); // date
                            columns.RelativeColumn(2); // class
                            columns.RelativeColumn(2); // price
                            columns.RelativeColumn(2); // seat
                        });

                        table.Header(h =>
                        {
                            h.Cell().Background(Colors.Grey.Lighten2).Padding(4).Text("Airline").SemiBold();
                            h.Cell().Background(Colors.Grey.Lighten2).Padding(4).Text("Route").SemiBold();
                            h.Cell().Background(Colors.Grey.Lighten2).Padding(4).Text("Date").SemiBold();
                            h.Cell().Background(Colors.Grey.Lighten2).Padding(4).Text("Class").SemiBold();
                            h.Cell().Background(Colors.Grey.Lighten2).Padding(4).Text("Price").SemiBold();
                            h.Cell().Background(Colors.Grey.Lighten2).Padding(4).Text("Seat").SemiBold();
                        });

                        foreach (var bf in fls)
                        {
                            var f = bf.Flight;
                            var airline = f?.AirlineName ?? "TBA Airline";
                            var route = $"{(f?.FlightDeparture ?? "TBA")} → {(f?.FlightDestination ?? "TBA")}";
                            var date = f?.DateDeparture == default ? "(TBA)" : f!.DateDeparture.ToString("yyyy-MM-dd HH:mm");
                            var cls = f?.Class.ToString() ?? "Economic";
                            var price = f?.Price > 0 ? $"{f.Price:0.00} EUR" : "—";
                            var seat = bf.Seat?.SeatNumber > 0
                                ? $"#{bf.Seat.SeatNumber}" + (bf.Seat.IsWindowSeat ? " (window)" : "")
                                : "—";

                            table.Cell().Padding(3).Text(airline);
                            table.Cell().Padding(3).Text(route);
                            table.Cell().Padding(3).Text(date);
                            table.Cell().Padding(3).Text(cls);
                            table.Cell().Padding(3).Text(price);
                            table.Cell().Padding(3).Text(seat);
                        }
                    });
                }

                // Extra info + simple PNR box
                col.Item().PaddingTop(10).Row(r =>
                {
                    r.RelativeItem().PaddingRight(6).Column(cc =>
                    {
                        cc.Item().Text("Important information").SemiBold();
                        cc.Item().Text("- Please arrive at the gate at least 40 minutes before departure.");
                        cc.Item().Text("- A government-issued photo ID is required.");
                        cc.Item().Text("- Baggage rules may vary by airline.");
                    });

                    var pnr = booking.Id.ToString().Replace("-", "").Substring(0, 6).ToUpperInvariant();
                    r.ConstantItem(160).Padding(10).Border(1).BorderColor(Colors.Grey.Lighten2).Column(cc =>
                    {
                        cc.Item().Text("PNR").SemiBold();
                        cc.Item().Text(pnr).FontSize(16);
                    });
                });
            });
        }
    }
}
