name: EC2 Docker-Compose Deploy

on:
  workflow_dispatch: # manual trigger only
    branches:
      - main

jobs:
  aws_instance_prep:
    runs-on: ubuntu-latest

    outputs:
      instance_id: ${{ steps.set_env.outputs.instance_id }}
      public_ip: ${{ steps.get_ip.outputs.public_ip }}

    steps:
      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}

      - name: Check for existing EC2 instance
        id: check_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=daystride-ec2" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)

          if [[ "$INSTANCE_ID" == "None" ]]; then
            echo "EXISTING_INSTANCE=false" >> $GITHUB_ENV
          else
            echo "EXISTING_INSTANCE=true" >> $GITHUB_ENV
            echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          fi

      - name: Launch EC2 Instance if needed
        if: env.EXISTING_INSTANCE == 'false'
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --launch-template LaunchTemplateId=${{ secrets.EC2_LAUNCH_TEMPLATE_ID }} \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=daystride-ec2}]" \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for instance to be ready
        run: |
          INSTANCE_ID=${{ env.INSTANCE_ID }}
          echo "Waiting for EC2 ($INSTANCE_ID) to be ready..."
          aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID
          echo "Instance is ready."

      - name: Get EC2 Public IP
        id: get_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Set instance ID output
        id: set_env
        run: echo "instance_id=${{ env.INSTANCE_ID }}" >> $GITHUB_OUTPUT

      - name: Print Public IP to Console
        run: |
          echo "============================================"
          echo "✅ EC2 Instance is ready!"
          echo "🌍 Public IP Address: http://${{ steps.get_ip.outputs.public_ip }}"
          echo "============================================"

  deploy:
    runs-on: ubuntu-latest
    needs: aws_instance_prep

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Copy docker-compose.yaml to EC2
        run: |
          scp -i ec2_key.pem -o StrictHostKeyChecking=no docker-compose.yaml ec2-user@${{ needs.aws_instance_prep.outputs.public_ip }}:/home/ec2-user/docker-compose.yml

      - name: Deploy with docker-compose
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          DB_PORT: ${{ secrets.DB_PORT }}
          WEB_PORT: ${{ secrets.WEB_PORT }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USE_SSL: ${{ secrets.SMTP_USE_SSL }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_FROM: ${{ secrets.SMTP_FROM }}
          SMTP_FROM_NAME: ${{ secrets.SMTP_FROM_NAME }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          AMADEUS_CLIENT_ID: ${{ secrets.AMADEUS_CLIENT_ID }}
          AMADEUS_CLIENT_SECRET: ${{ secrets.AMADEUS_CLIENT_SECRET }}
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ needs.aws_instance_prep.outputs.public_ip }} "
            echo 'MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}' > /home/ec2-user/.env &&
            echo 'MYSQL_DATABASE=${MYSQL_DATABASE}' >> /home/ec2-user/.env &&
            echo 'MYSQL_USER=${MYSQL_USER}' >> /home/ec2-user/.env &&
            echo 'DB_PORT=${DB_PORT}' >> /home/ec2-user/.env &&
            echo 'WEB_PORT=${WEB_PORT}' >> /home/ec2-user/.env &&
            echo 'SMTP_SERVER=${SMTP_SERVER}' >> /home/ec2-user/.env &&
            echo 'SMTP_PORT=${SMTP_PORT}' >> /home/ec2-user/.env &&
            echo 'SMTP_USE_SSL=${SMTP_USE_SSL}' >> /home/ec2-user/.env &&
            echo 'SMTP_USERNAME=${SMTP_USERNAME}' >> /home/ec2-user/.env &&
            echo 'SMTP_PASSWORD=${SMTP_PASSWORD}' >> /home/ec2-user/.env &&
            echo 'SMTP_FROM=${SMTP_FROM}' >> /home/ec2-user/.env &&
            echo 'SMTP_FROM_NAME=${SMTP_FROM_NAME}' >> /home/ec2-user/.env &&
            echo 'STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}' >> /home/ec2-user/.env &&
            echo 'STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}' >> /home/ec2-user/.env &&
            echo 'AMADEUS_CLIENT_ID=${AMADEUS_CLIENT_ID}' >> /home/ec2-user/.env &&
            echo 'AMADEUS_CLIENT_SECRET=${AMADEUS_CLIENT_SECRET}' >> /home/ec2-user/.env &&
            cd /home/ec2-user &&
            docker-compose --env-file .env down || true &&
            docker-compose --env-file .env up -d
          "
